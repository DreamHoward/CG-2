#version 330 core
out vec4 color;

in vec3 FragPos;  
in vec3 Normal;  
in vec2 Texcoord;

uniform sampler2D shadowMap;
uniform sampler2D MyTexture_1;
uniform sampler2D noiseTextureID;
uniform float dissolveFactor;   

uniform vec3 lightPos; 
uniform vec3 viewPos;
uniform mat4 lightProjection;
uniform mat4 lightView;

void main()
{
	vec4 vCloudSample = texture(noiseTextureID, Texcoord);
 
    if(vCloudSample.r < dissolveFactor)
        discard; 
	

	vec4 texcolor = texture(MyTexture_1,Texcoord);
		
	vec4 FragPosLightSpace = lightProjection * lightView * vec4(FragPos, 1.0);
	vec3 lightDir = normalize(lightPos - FragPos);

	vec3 projCoords = FragPosLightSpace.xyz / FragPosLightSpace.w;
	float closestDepth = texture(shadowMap, projCoords.xy/2+0.5).r; 
	float currentDepth = projCoords.z;
	float bias = max(0.05 * (1.0 - dot(Normal, lightDir)), 0.005);

	float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy/2+0.5 + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;

	if(projCoords.z > 1.0)
        shadow = 0.0;

    // Ambient

    vec3 ambient = vec3(0.2,0.2,0.2);
  	
    // Diffuse 
    vec3 norm = normalize(Normal);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff*vec3(0.5,0.5,0.5) * (1.0-shadow);
    
    // Specular
    vec3 specularStrength = vec3(0.8,0.8,0.8);
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 3.6);
    vec3 specular = specularStrength * spec *(1.0-shadow);    
    vec4 result = vec4((ambient + diffuse),1);
	
	
    color = result* texcolor + vec4(specular,1);
	
} 